{"name":"Brokerjs","tagline":"An internal application message bus with namespaces, wildcards, and more! Decouple those classes!","body":"# BrokerJS (.com)\r\n\r\n![Build Status][BS img]\r\n\r\n[BrokerJS] is an internal application message bus dedicated to decoupling classes, modules, and so on. It supports name spaces with wild-cards. It is fully documented and thoroughly tested. View documentation and examples [here].\r\n \r\n### Version\r\n0.5.1\r\n\r\n### Tech\r\n\r\nBrokerJS runs on [NodeJS] ~~and in the browser~~. It requires NodeJS 4.0.0 or greater (uses ECMA6).\r\n\r\n### Installation\r\n\r\nNode: \r\n```sh\r\n$ npm install brokerjs --save\r\n```\r\n\r\n### Usage Example 1: using brokerjs for \"callbacks\"\r\n```javascript\r\nlet Broker = require('brokerjs');\r\nlet broker = new Broker();\r\n\r\n// Some login controller:\r\nfunction login(name, password, callback) {\r\n    broker.on('login:for:'+name, function(e) { \r\n        broker.off(e.subscription.subId);\r\n        callback(e.data.result);\r\n    });\r\n    broker.emit('auth:login', {name:name, pw:password, responseId: 'login:for:'+name});\r\n}\r\n\r\n// Some auth module/class:\r\nfunction constructor() {\r\n    broker.on('auth:login', (e) => { return this.onAuthLogin(e); });\r\n}\r\nfunction onAuthLogin(event) {\r\n    let p = new Promise((accept,reject) => {\r\n        // Do some async DB work, auth work, etc.\r\n        let result = true; \r\n        broker.emit(event.data.responseId, {result: result, hash:'123abc'});\r\n        accept();\r\n    });\r\n    return p;\r\n}\r\n```\r\n\r\nAlternatively, you don't always need to return a promise, depending on how you want to use broker.\r\n```javascript\r\nfunction onAuthLogin(event) {\r\n    // Do some async DB work, auth work, etc.\r\n    let result = true; \r\n    broker.emit(event.data.responseId, {result: result, hash:'123abc'});\r\n}\r\n```\r\n\r\n### Usage Example 2: * channel ids\r\n```javascript\r\nfunction response(e) {\r\n    console.log(e.subscription.channelId + ' - ' + e.data);\r\n}\r\n\r\nbroker.on('*', response);\r\nbroker.on('app:*', response);\r\nbroker.on('app:init', response);\r\nbroker.on('app:control:shutdown', response);\r\n\r\nbroker.emit('app:control:shutdown', 'Woot!');\r\n// displays: \r\n//    app:control:shutdown - Woot!\r\n//    app:* - Woot!\r\n//    * - Woot!\r\n\r\nbroker.emit('app:init:some:option', 'Go for it!');\r\n// displays: \r\n//    app:* - Go for it!\r\n//    * - Go for it!\r\n\r\nbroker.emit('app:init', 'Init!');\r\n// displays: \r\n//    app:init - Init!\r\n//    app:* - Init!\r\n//    * - Init!\r\n```\r\n\r\n### Usage Example 3: Priorities\r\n```javascript\r\nlet mycallback = function(e) {\r\n    console.log('BOB');\r\n};\r\nbroker.on('a:b', {priority:100}, mycallback);\r\n\r\nbroker.on('a:b', {priority:2}, function(e) {\r\n    console.log('JACK');\r\n});\r\nbroker.on('a:b', {priority:5}, function(e) {\r\n    console.log('JIM');\r\n});\r\nbroker.on('a:b', {priority:3}, function(e) {\r\n    console.log('FIN');\r\n});\r\nbroker.on('*', {priority:1}, function(e) {\r\n    console.log('WHAAAAT?!');\r\n});\r\n\r\nbroker.emit('a:b');\r\n// displays:\r\n//    JACK\r\n//    FIN\r\n//    JIM\r\n//    BOB\r\n//    WHAAAAT?!\r\n\r\n// OVERRIDING previous options\r\nbroker.on('a:b', {priority:1}, mycallback);\r\n\r\nbroker.emit('a:b');\r\n// displays:\r\n//    BOB\r\n//    JACK\r\n//    FIN\r\n//    JIM\r\n//    WHAAAAT?!\r\n```\r\n\r\n### Todos\r\n\r\n - Finish BrokerJS.com\r\n - Implement easy data return from emit.\r\n - Implement one-off subscription call and response helpers.\r\n - Implement two path response from subscribers.\r\n - Increase comment coverage\r\n\r\nLicense\r\n----\r\n\r\nMIT\r\n\r\n\r\n**Free Software!**\r\n\r\n[//]: # (Links)\r\n\r\n   [git-repo-url]: <https://github.com/echobnet/brokerjs>\r\n   [NodeJS]: <http://nodejs.org>\r\n   [BrokerJS]: <http://brokerjs.com>\r\n   [here]: <http://brokerjs.com>\r\n   [BS img]: <https://codeship.com/projects/51834170-9606-0133-3125-3e79f15ecc1c/status?branch=master>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}